{"version":3,"file":"component---src-pages-app-[placeholder]-js-e0dea9d2bd13db35cd39.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js","webpack://gatsby-starter-default/./node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupContext.js","webpack://gatsby-starter-default/./node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupButtonContext.js","webpack://gatsby-starter-default/./node_modules/@mui/material/ToggleButton/toggleButtonClasses.js","webpack://gatsby-starter-default/./node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js","webpack://gatsby-starter-default/./node_modules/@mui/utils/esm/getValidReactChildren/getValidReactChildren.js","webpack://gatsby-starter-default/./node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js","webpack://gatsby-starter-default/./node_modules/@mui/material/ToggleButton/ToggleButton.js","webpack://gatsby-starter-default/./node_modules/@mui/icons-material/esm/Bookmark.js","webpack://gatsby-starter-default/./src/helpers/git.js","webpack://gatsby-starter-default/./src/pages/app/[placeholder].js","webpack://gatsby-starter-default/./src/hooks/useIframeMessenger.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getToggleButtonGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButtonGroup', slot);\n}\nconst toggleButtonGroupClasses = generateUtilityClasses('MuiToggleButtonGroup', ['root', 'selected', 'horizontal', 'vertical', 'disabled', 'grouped', 'groupedHorizontal', 'groupedVertical', 'fullWidth', 'firstButton', 'lastButton', 'middleButton']);\nexport default toggleButtonGroupClasses;","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst ToggleButtonGroupContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  ToggleButtonGroupContext.displayName = 'ToggleButtonGroupContext';\n}\nexport default ToggleButtonGroupContext;","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst ToggleButtonGroupButtonContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  ToggleButtonGroupButtonContext.displayName = 'ToggleButtonGroupButtonContext';\n}\nexport default ToggleButtonGroupButtonContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getToggleButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButton', slot);\n}\nconst toggleButtonClasses = generateUtilityClasses('MuiToggleButton', ['root', 'disabled', 'selected', 'standard', 'primary', 'secondary', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'fullWidth']);\nexport default toggleButtonClasses;","'use client';\n\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport getValidReactChildren from '@mui/utils/getValidReactChildren';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport toggleButtonGroupClasses, { getToggleButtonGroupUtilityClass } from \"./toggleButtonGroupClasses.js\";\nimport ToggleButtonGroupContext from \"./ToggleButtonGroupContext.js\";\nimport ToggleButtonGroupButtonContext from \"./ToggleButtonGroupButtonContext.js\";\nimport toggleButtonClasses from \"../ToggleButton/toggleButtonClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    orientation,\n    fullWidth,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation, fullWidth && 'fullWidth'],\n    grouped: ['grouped', `grouped${capitalize(orientation)}`, disabled && 'disabled'],\n    firstButton: ['firstButton'],\n    lastButton: ['lastButton'],\n    middleButton: ['middleButton']\n  };\n  return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);\n};\nconst ToggleButtonGroupRoot = styled('div', {\n  name: 'MuiToggleButtonGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles.grouped\n    }, {\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]\n    }, {\n      [`& .${toggleButtonGroupClasses.firstButton}`]: styles.firstButton\n    }, {\n      [`& .${toggleButtonGroupClasses.lastButton}`]: styles.lastButton\n    }, {\n      [`& .${toggleButtonGroupClasses.middleButton}`]: styles.middleButton\n    }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'inline-flex',\n  borderRadius: (theme.vars || theme).shape.borderRadius,\n  variants: [{\n    props: {\n      orientation: 'vertical'\n    },\n    style: {\n      flexDirection: 'column',\n      [`& .${toggleButtonGroupClasses.grouped}`]: {\n        [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n          borderTop: 0,\n          marginTop: 0\n        }\n      },\n      [`& .${toggleButtonGroupClasses.firstButton},& .${toggleButtonGroupClasses.middleButton}`]: {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n      },\n      [`& .${toggleButtonGroupClasses.lastButton},& .${toggleButtonGroupClasses.middleButton}`]: {\n        marginTop: -1,\n        borderTop: '1px solid transparent',\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n      },\n      [`& .${toggleButtonGroupClasses.lastButton}.${toggleButtonClasses.disabled},& .${toggleButtonGroupClasses.middleButton}.${toggleButtonClasses.disabled}`]: {\n        borderTop: '1px solid transparent'\n      }\n    }\n  }, {\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      orientation: 'horizontal'\n    },\n    style: {\n      [`& .${toggleButtonGroupClasses.grouped}`]: {\n        [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n          borderLeft: 0,\n          marginLeft: 0\n        }\n      },\n      [`& .${toggleButtonGroupClasses.firstButton},& .${toggleButtonGroupClasses.middleButton}`]: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0\n      },\n      [`& .${toggleButtonGroupClasses.lastButton},& .${toggleButtonGroupClasses.middleButton}`]: {\n        marginLeft: -1,\n        borderLeft: '1px solid transparent',\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0\n      },\n      [`& .${toggleButtonGroupClasses.lastButton}.${toggleButtonClasses.disabled},& .${toggleButtonGroupClasses.middleButton}.${toggleButtonClasses.disabled}`]: {\n        borderLeft: '1px solid transparent'\n      }\n    }\n  }]\n})));\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButtonGroup(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiToggleButtonGroup'\n  });\n  const {\n    children,\n    className,\n    color = 'standard',\n    disabled = false,\n    exclusive = false,\n    fullWidth = false,\n    onChange,\n    orientation = 'horizontal',\n    size = 'medium',\n    value,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    disabled,\n    fullWidth,\n    orientation,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback((event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n    onChange(event, newValue);\n  }, [onChange, value]);\n  const handleExclusiveChange = React.useCallback((event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    onChange(event, value === buttonValue ? null : buttonValue);\n  }, [onChange, value]);\n  const context = React.useMemo(() => ({\n    className: classes.grouped,\n    onChange: exclusive ? handleExclusiveChange : handleChange,\n    value,\n    size,\n    fullWidth,\n    color,\n    disabled\n  }), [classes.grouped, exclusive, handleExclusiveChange, handleChange, value, size, fullWidth, color, disabled]);\n  const validChildren = getValidReactChildren(children);\n  const childrenCount = validChildren.length;\n  const getButtonPositionClassName = index => {\n    const isFirstButton = index === 0;\n    const isLastButton = index === childrenCount - 1;\n    if (isFirstButton && isLastButton) {\n      return '';\n    }\n    if (isFirstButton) {\n      return classes.firstButton;\n    }\n    if (isLastButton) {\n      return classes.lastButton;\n    }\n    return classes.middleButton;\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonGroupRoot, {\n    role: \"group\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState,\n    ...other,\n    children: /*#__PURE__*/_jsx(ToggleButtonGroupContext.Provider, {\n      value: context,\n      children: validChildren.map((child, index) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (isFragment(child)) {\n            console.error([\"MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n          }\n        }\n        return /*#__PURE__*/_jsx(ToggleButtonGroupButtonContext.Provider, {\n          value: getButtonPositionClassName(index),\n          children: child\n        }, index);\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is selected.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   * @default false\n   */\n  exclusive: PropTypes.bool,\n  /**\n   * If `true`, the button group will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default ToggleButtonGroup;","import * as React from 'react';\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport default function getValidReactChildren(children) {\n  return React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child));\n}","// Determine if the toggle button value matches, or is contained in, the\n// candidate group value.\nexport default function isValueSelected(value, candidate) {\n  if (candidate === undefined || value === undefined) {\n    return false;\n  }\n  if (Array.isArray(candidate)) {\n    return candidate.includes(value);\n  }\n  return value === candidate;\n}","'use client';\n\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport resolveProps from '@mui/utils/resolveProps';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport toggleButtonClasses, { getToggleButtonUtilityClass } from \"./toggleButtonClasses.js\";\nimport ToggleButtonGroupContext from \"../ToggleButtonGroup/ToggleButtonGroupContext.js\";\nimport ToggleButtonGroupButtonContext from \"../ToggleButtonGroup/ToggleButtonGroupButtonContext.js\";\nimport isValueSelected from \"../ToggleButtonGroup/isValueSelected.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    fullWidth,\n    selected,\n    disabled,\n    size,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled', fullWidth && 'fullWidth', `size${capitalize(size)}`, color]\n  };\n  return composeClasses(slots, getToggleButtonUtilityClass, classes);\n};\nconst ToggleButtonRoot = styled(ButtonBase, {\n  name: 'MuiToggleButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  ...theme.typography.button,\n  borderRadius: (theme.vars || theme).shape.borderRadius,\n  padding: 11,\n  border: `1px solid ${(theme.vars || theme).palette.divider}`,\n  color: (theme.vars || theme).palette.action.active,\n  [`&.${toggleButtonClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled,\n    border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`\n  },\n  '&:hover': {\n    textDecoration: 'none',\n    // Reset on mouse devices\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  variants: [{\n    props: {\n      color: 'standard'\n    },\n    style: {\n      [`&.${toggleButtonClasses.selected}`]: {\n        color: (theme.vars || theme).palette.text.primary,\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.selectedOpacity),\n        '&:hover': {\n          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.text.primary, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.selectedOpacity)\n          }\n        }\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      [`&.${toggleButtonClasses.selected}`]: {\n        color: (theme.vars || theme).palette[color].main,\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette[color].main, theme.palette.action.selectedOpacity),\n        '&:hover': {\n          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette[color].main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette[color].main, theme.palette.action.selectedOpacity)\n          }\n        }\n      }\n    }\n  })), {\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      padding: 7,\n      fontSize: theme.typography.pxToRem(13)\n    }\n  }, {\n    props: {\n      size: 'large'\n    },\n    style: {\n      padding: 15,\n      fontSize: theme.typography.pxToRem(15)\n    }\n  }]\n})));\nconst ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(inProps, ref) {\n  // props priority: `inProps` > `contextProps` > `themeDefaultProps`\n  const {\n    value: contextValue,\n    ...contextProps\n  } = React.useContext(ToggleButtonGroupContext);\n  const toggleButtonGroupButtonContextPositionClassName = React.useContext(ToggleButtonGroupButtonContext);\n  const resolvedProps = resolveProps({\n    ...contextProps,\n    selected: isValueSelected(inProps.value, contextValue)\n  }, inProps);\n  const props = useDefaultProps({\n    props: resolvedProps,\n    name: 'MuiToggleButton'\n  });\n  const {\n    children,\n    className,\n    color = 'standard',\n    disabled = false,\n    disableFocusRipple = false,\n    fullWidth = false,\n    onChange,\n    onClick,\n    selected,\n    size = 'medium',\n    value,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    color,\n    disabled,\n    disableFocusRipple,\n    fullWidth,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = event => {\n    if (onClick) {\n      onClick(event, value);\n      if (event.defaultPrevented) {\n        return;\n      }\n    }\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n  const positionClassName = toggleButtonGroupButtonContextPositionClassName || '';\n  return /*#__PURE__*/_jsx(ToggleButtonRoot, {\n    className: clsx(contextProps.className, classes.root, className, positionClassName),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    ownerState: ownerState,\n    \"aria-pressed\": selected,\n    ...other,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is in an active state.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the button will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the state changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the button is clicked.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onClick: PropTypes.func,\n  /**\n   * If `true`, the button is rendered in an active state.\n   */\n  selected: PropTypes.bool,\n  /**\n   * The size of the component.\n   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes /* @typescript-to-proptypes-ignore */.any.isRequired\n} : void 0;\nexport default ToggleButton;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2\"\n}), 'Bookmark');","export const basicHTMLApp = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Welcome to AppSeek</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      background-color: #f0f0f0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      flex-direction: column;\n      text-align: center;\n    }\n    h1 {\n      color: #1976d2;\n      margin-bottom: 20px;\n    }\n    .instructions {\n      background-color: #fff;\n      padding: 20px;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      max-width: 600px;\n      width: 100%;\n    }\n    .instructions p {\n      margin: 10px 0;\n      line-height: 1.6;\n    }\n    .instructions code {\n      background-color: #f5f5f5;\n      padding: 4px 8px;\n      border-radius: 4px;\n      font-family: monospace;\n    }\n  </style>\n</head>\n<body>\n  <h1>Welcome to AppSeek</h1>\n  <div class=\"instructions\">\n    <p>Follow these steps to create your application:</p>\n    <ol>\n      <li>\n        <strong>Step 1: Describe Your App</strong>\n        <p>In the <strong>\"Step 1: What you want to do?\"</strong> section, describe the application you want to build. For example:</p>\n        <code>\"Create a to-do list app with a dark theme.\"</code>\n      </li>\n      <li>\n        <strong>Step 2: Copy the Enhanced Prompt</strong>\n        <p>Once you describe your app, the <strong>\"Step 2: Copy this\"</strong> section will generate an enhanced prompt. Copy this prompt and paste it into the AI chat.</p>\n      </li>\n      <li>\n        <strong>Step 3: Build Your App</strong>\n        <p>Use the AI-generated code to build your app. You can edit the code in the <strong>Code Editor</strong> and see the live preview in the <strong>Your Awesome App</strong> section.</p>\n      </li>\n      <li>\n        <strong>Step 4: Deploy Your App</strong>\n        <p>Once your app is ready, click the <strong>Deploy</strong> button to publish it.</p>\n      </li>\n    </ol>\n    <p>Happy coding! 🚀</p>\n  </div>\n  <script>\n    console.log('AppSeek is ready to help you build amazing apps!');\n  </script>\n</body>\n</html>\n`.trim(); // Remove leading/trailing whitespace","import React, { useState, useEffect, useRef } from 'react';\nimport Layout from '../../components/Layout';\nimport {\n  Box,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n} from '@mui/material';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew'; // 👈 New icon import\nimport { SnackbarAlert } from '../../components/placeholder/SnackbarAlert';\nimport { PromptSection } from '../../components/placeholder/PromptSection';\nimport { basicHTMLApp } from '../../helpers/git';\nimport LoginModal from '../../components/LoginModal';\nimport Parse from '../../vendor/Parse';\nimport Editor from '@monaco-editor/react';\nimport Frame from 'react-frame-component';\nimport { useIframeMessenger } from '../../hooks/useIframeMessenger';\n\nconst AppPage = ({ location, placeholder }) => {\n  const [state, setState] = useState({\n    appName: 'My Web App',\n    prompt: '',\n    enhancedPrompt: '',\n    files: {\n      'index.html': basicHTMLApp,\n      'style.css': '',\n      'script.js': '',\n    },\n    snackbarOpen: false,\n    snackbarMessage: '',\n    snackbarSeverity: 'info',\n    systemPrompt: 'create web application in a single html file, making sure UI is properly aligned and user experience is taken care of',\n    showCodeEditor: true,\n    showAppOutput: true,\n    showAI: true,\n    loginModalOpen: false,\n    user: null,\n    isAppDeployed: false,\n    deployModalOpen: false,\n    isDeploying: false,\n    deployStatusMessage: '',\n    isPromoting: false,\n    promoteModalOpen: false,\n    src: placeholder,\n    dest: '',\n    token: '',\n    previewMode: 'live',\n  });\n\n  const [frameLoaded, setFrameLoaded] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState(`https://build.appseek.ai/${placeholder}`);\n  const [previewUrlInput, setPreviewUrlInput] = useState(`https://build.appseek.ai/${placeholder}`);\n  const [bookmarkModalOpen, setBookmarkModalOpen] = useState(false);\n  const [bookmarkLabel, setBookmarkLabel] = useState('');\n\n  const {\n    appName,\n    prompt,\n    enhancedPrompt,\n    files,\n    snackbarOpen,\n    snackbarMessage,\n    snackbarSeverity,\n    systemPrompt,\n    loginModalOpen,\n    user,\n    isAppDeployed,\n    deployModalOpen,\n    isDeploying,\n    deployStatusMessage,\n    src,\n    token,\n    previewMode,\n  } = state;\n\n  const frameRef = useRef(null);\n\n  const handleChildMessage = (message) => {\n    console.log('Received from child:', message);\n    if (message.type === 'deeplink' && typeof message.data === 'object') {\n      const params = new URLSearchParams(message.data).toString();\n      const newUrl = `${previewUrl.split('?')[0]}?${params}`;\n      setPreviewUrlInput(newUrl);\n      setPreviewUrl(newUrl);\n    }\n  };\n\n  const { iframeRef, sendMessage } = useIframeMessenger({\n    onMessageReceived: handleChildMessage,\n    targetOrigin: typeof window !== 'undefined' && window.location.origin,\n  });\n\n  const queryParams = new URLSearchParams(location.search);\n  const urlPrompt = queryParams.get('prompt');\n\n  const fetchAppData = async () => {\n    try {\n      const result = await Parse.Cloud.run('getApp', { id: placeholder });\n      const normalizedFiles = {\n        'index.html': result.files['index.html'] || basicHTMLApp,\n        'style.css': result.files['style.css'] || '',\n        'script.js': result.files['script.js'] || '',\n      };\n      setState((prev) => ({\n        ...prev,\n        files: normalizedFiles,\n        isAppDeployed: !!result?.files,\n        appName: result?.appName || 'My Web App',\n      }));\n    } catch (error) {\n      console.error('Error fetching app data:', error);\n      setState((prev) => ({\n        ...prev,\n        isAppDeployed: false,\n        files: { 'index.html': basicHTMLApp, 'style.css': '', 'script.js': '' },\n        snackbarMessage: 'Failed to load app data',\n        snackbarSeverity: 'error',\n        snackbarOpen: true,\n      }));\n    }\n  };\n\n  useEffect(() => {\n    fetchAppData();\n  }, [placeholder]);\n\n  useEffect(() => {\n    const combinedCode = Object.values(files).join('\\n\\n');\n    setState((prev) => ({\n      ...prev,\n      enhancedPrompt: `${combinedCode}\\n\\n${prompt}\\n\\n${systemPrompt}`,\n    }));\n  }, [files, prompt, systemPrompt]);\n\n  useEffect(() => {\n    const currentUser = Parse.User.current();\n    if (currentUser) setState((prev) => ({ ...prev, user: currentUser }));\n  }, []);\n\n  useEffect(() => {\n    if (urlPrompt) {\n      setState((prev) => ({ ...prev, systemPrompt: urlPrompt }));\n    }\n  }, [urlPrompt]);\n\n  const handleCopyPrompt = () => {\n    navigator.clipboard.writeText(enhancedPrompt).then(() => {\n      setState((prev) => ({\n        ...prev,\n        snackbarMessage: 'Prompt copied to clipboard!',\n        snackbarSeverity: 'success',\n        snackbarOpen: true,\n      }));\n    }).catch(() => {\n      setState((prev) => ({\n        ...prev,\n        snackbarMessage: 'Failed to copy prompt',\n        snackbarSeverity: 'error',\n        snackbarOpen: true,\n      }));\n    });\n  };\n\n  const handleDeploy = async () => {\n    try {\n      await Parse.Cloud.run('deployApp', { files, placeholder, appname: appName.trim() });\n      setState((prev) => ({\n        ...prev,\n        snackbarMessage: 'App deployed successfully!',\n        snackbarSeverity: 'success',\n        snackbarOpen: true,\n        isAppDeployed: true,\n        deployStatusMessage: 'A link will appear beside the app name',\n        isDeploying: false,\n      }));\n      setTimeout(() => setState((prev) => ({ ...prev, deployStatusMessage: '' })), 3000);\n    } catch {\n      setState((prev) => ({\n        ...prev,\n        snackbarMessage: 'Failed to deploy app. Please try again.',\n        snackbarSeverity: 'error',\n        snackbarOpen: true,\n        isDeploying: false,\n      }));\n    }\n  };\n\n  const handleFilesChange = (filePath, newCode) => {\n    setState((prev) => ({\n      ...prev,\n      files: { ...prev.files, [filePath]: newCode },\n    }));\n  };\n\n  const handleBookmarkSave = () => {\n    const newBookmark = { label: bookmarkLabel.trim(), url: previewUrlInput.trim() };\n    const bookmarks = JSON.parse(localStorage.getItem('bookmarks') || '[]');\n    const exists = bookmarks.some(b => b.url === newBookmark.url);\n\n    if (!exists) {\n      const updated = [...bookmarks, newBookmark];\n      localStorage.setItem('bookmarks', JSON.stringify(updated));\n      setState(prev => ({\n        ...prev,\n        snackbarMessage: 'Bookmark saved!',\n        snackbarSeverity: 'success',\n        snackbarOpen: true,\n      }));\n    } else {\n      setState(prev => ({\n        ...prev,\n        snackbarMessage: 'Bookmark already exists!',\n        snackbarSeverity: 'warning',\n        snackbarOpen: true,\n      }));\n    }\n\n    setBookmarkModalOpen(false);\n    setBookmarkLabel('');\n  };\n\n  const generateIframeContent = () => {\n    const { 'index.html': html = '', 'style.css': css = '', 'script.js': js = '' } = files;\n    return `<!DOCTYPE html><html><head><style>${css}</style></head><body>${html}<script>${js}</script></body></html>`;\n  };\n\n  return (\n    <Layout deployButton={\n      <Box sx={{ display: 'flex', gap: 1 }}>\n        <Button variant=\"contained\" onClick={() => setState(prev => ({ ...prev, deployModalOpen: true }))}>\n          Deploy\n        </Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => {\n          Parse.Cloud.run(\"publishApp\", { placeholder: src });\n          setState(prev => ({\n            ...prev,\n            snackbarMessage: 'Publish functionality coming soon!',\n            snackbarSeverity: 'info',\n            snackbarOpen: true\n          }));\n        }}>\n          Publish\n        </Button>\n      </Box>\n    }>\n      <Typography variant=\"h5\" sx={{ mt: 2, mb: 3, fontWeight: 600 }}>{appName}</Typography>\n\n      <ToggleButtonGroup\n        value={previewMode}\n        exclusive\n        onChange={(e, val) => val && setState((prev) => ({ ...prev, previewMode: val }))}\n        sx={{ mb: 2 }}\n      >\n        <ToggleButton value=\"live\">Live Preview</ToggleButton>\n      </ToggleButtonGroup>\n\n      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2, mb: 4, height: 'calc(100vh - 250px)' }}>\n        <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', border: '1px solid #ccc' }}>\n          <Editor\n            height=\"100%\"\n            width=\"100%\"\n            theme=\"vs-light\"\n            defaultLanguage=\"html\"\n            value={files['index.html']}\n            onChange={(value) => handleFilesChange('index.html', value)}\n            options={{ minimap: { enabled: false }, fontSize: 14 }}\n          />\n        </Box>\n        <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', border: '1px solid #ccc' }}>\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center', p: 1, backgroundColor: '#f5f5f5' }}>\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              size=\"small\"\n              value={previewUrlInput}\n              onChange={(e) => setPreviewUrlInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && setPreviewUrl(previewUrlInput)}\n            />\n            <Button variant=\"contained\" onClick={() => setBookmarkModalOpen(true)}>\n              <BookmarkIcon />\n            </Button>\n            <Button\n              variant=\"outlined\"\n              onClick={() => window.open(previewUrlInput, '_blank')}\n              sx={{ minWidth: '40px', px: 1 }}\n            >\n              <OpenInNewIcon />\n            </Button>\n          </Box>\n          <Frame\n            ref={frameRef}\n            style={{ width: '100%', height: '100%', border: 'none' }}\n            initialContent={generateIframeContent()}\n            onLoad={() => setFrameLoaded(true)}\n            mountTarget=\"#mount-target\"\n          >\n            {frameLoaded && <div id=\"mount-target\" />}\n          </Frame>\n        </Box>\n      </Box>\n\n      <PromptSection\n        prompt={prompt}\n        setPrompt={(value) => setState((prev) => ({ ...prev, prompt: value }))}\n        enhancedPrompt={enhancedPrompt}\n        handleCopyPrompt={handleCopyPrompt}\n        systemPrompt={systemPrompt}\n        setSystemPrompt={(value) => setState((prev) => ({ ...prev, systemPrompt: value }))}\n      />\n\n      <LoginModal\n        open={loginModalOpen}\n        onClose={() => setState((prev) => ({ ...prev, loginModalOpen: false }))}\n        onLoginSuccess={() => {\n          const currentUser = Parse.User.current();\n          setState((prev) => ({ ...prev, user: currentUser, loginModalOpen: false }));\n        }}\n      />\n\n      <Dialog open={deployModalOpen} onClose={() => setState((prev) => ({ ...prev, deployModalOpen: false }))}>\n        <DialogTitle>Bookmark This App</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Before deploying, we recommend bookmarking this app to avoid losing it.</DialogContentText>\n          <TextField\n            autoFocus\n            fullWidth\n            label=\"App Name\"\n            value={state.appName}\n            onChange={(e) => setState((prev) => ({ ...prev, appName: e.target.value }))}\n            sx={{ mt: 1 }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setState((prev) => ({ ...prev, deployModalOpen: false }))}>Cancel</Button>\n          <Button\n            onClick={() => { setState((prev) => ({ ...prev, isDeploying: true, deployModalOpen: false })); handleDeploy(); }}\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={isDeploying}\n          >\n            {isDeploying ? 'Deploying...' : 'Deploy'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={bookmarkModalOpen} onClose={() => setBookmarkModalOpen(false)}>\n        <DialogTitle>Save Bookmark</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            fullWidth\n            label=\"Label\"\n            value={bookmarkLabel}\n            onChange={(e) => setBookmarkLabel(e.target.value)}\n            sx={{ mt: 1 }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setBookmarkModalOpen(false)}>Cancel</Button>\n          <Button onClick={handleBookmarkSave} color=\"primary\" variant=\"contained\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <SnackbarAlert\n        open={snackbarOpen}\n        message={snackbarMessage}\n        severity={snackbarSeverity}\n        onClose={() => setState((prev) => ({ ...prev, snackbarOpen: false }))}\n      />\n    </Layout>\n  );\n};\n\nexport default AppPage;\n","import { useEffect, useRef, useState } from 'react';\n\nexport function useIframeMessenger({ onMessageReceived, targetOrigin = '*' }) {\n  const iframeRef = useRef(null);\n  const [isIframeReady, setIsIframeReady] = useState(false);\n  const [lastMessage, setLastMessage] = useState(null);\n\n  // Send message to child iframe\n  const sendMessage = (message) => {\n    if (!iframeRef.current || !isIframeReady) {\n      console.warn('Iframe not ready or not available');\n      return;\n    }\n\n    try {\n      iframeRef.current.contentWindow.postMessage(message, targetOrigin);\n    } catch (error) {\n      console.error('Failed to post message to iframe:', error);\n    }\n  };\n\n  // Handle incoming messages\n  useEffect(() => {\n    const handleMessage = (event) => {\n      // Security checks\n      if (targetOrigin !== '*' && event.origin !== targetOrigin) return;\n      if (iframeRef.current && event.source !== iframeRef.current.contentWindow) return;\n\n      setLastMessage(event.data);\n      if (onMessageReceived) {\n        onMessageReceived(event.data);\n      }\n    };\n    if(typeof window !== 'undefined') {\n        window.addEventListener('message', handleMessage);\n        return () => window.removeEventListener('message', handleMessage);\n    }\n  }, [onMessageReceived, targetOrigin]);\n\n  // Handle iframe load event\n  const handleIframeLoad = () => {\n    setIsIframeReady(true);\n  };\n\n  return {\n    iframeRef,\n    isIframeReady,\n    lastMessage,\n    sendMessage,\n    iframeProps: {\n      ref: iframeRef,\n      onLoad: handleIframeLoad,\n      // Add other default iframe props if needed\n    }\n  };\n}"],"names":["getToggleButtonGroupUtilityClass","slot","generateUtilityClass","generateUtilityClasses","undefined","getToggleButtonUtilityClass","ToggleButtonGroupRoot","styled","name","overridesResolver","props","styles","ownerState","grouped","capitalize","orientation","firstButton","lastButton","middleButton","root","vertical","fullWidth","memoTheme","theme","display","borderRadius","vars","shape","variants","style","flexDirection","selected","borderTop","marginTop","borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius","disabled","width","borderLeft","marginLeft","inProps","ref","children","className","color","exclusive","onChange","size","value","other","classes","slots","composeClasses","useUtilityClasses","handleChange","event","buttonValue","index","indexOf","newValue","slice","splice","concat","handleExclusiveChange","context","validChildren","toArray","filter","child","getValidReactChildren","childrenCount","length","getButtonPositionClassName","isFirstButton","isLastButton","role","clsx","Provider","map","isValueSelected","candidate","Array","isArray","includes","ToggleButtonRoot","ButtonBase","typography","button","padding","border","palette","divider","action","active","disabledBackground","textDecoration","backgroundColor","text","primaryChannel","hoverOpacity","primary","selectedOpacity","Object","entries","createSimplePaletteValueFilter","main","mainChannel","fontSize","pxToRem","contextValue","contextProps","toggleButtonGroupButtonContextPositionClassName","resolvedProps","resolveProps","disableFocusRipple","onClick","positionClassName","focusRipple","defaultPrevented","d","basicHTMLApp","trim","location","placeholder","state","setState","useState","appName","prompt","enhancedPrompt","files","snackbarOpen","snackbarMessage","snackbarSeverity","systemPrompt","showCodeEditor","showAppOutput","showAI","loginModalOpen","user","isAppDeployed","deployModalOpen","isDeploying","deployStatusMessage","isPromoting","promoteModalOpen","src","dest","token","previewMode","frameLoaded","setFrameLoaded","previewUrl","setPreviewUrl","previewUrlInput","setPreviewUrlInput","bookmarkModalOpen","setBookmarkModalOpen","bookmarkLabel","setBookmarkLabel","frameRef","useRef","iframeRef","sendMessage","onMessageReceived","targetOrigin","isIframeReady","setIsIframeReady","lastMessage","setLastMessage","useEffect","handleMessage","origin","current","source","contentWindow","data","window","addEventListener","removeEventListener","message","postMessage","error","console","warn","iframeProps","onLoad","useIframeMessenger","log","type","params","URLSearchParams","toString","newUrl","split","urlPrompt","search","get","async","result","Parse","Cloud","run","id","normalizedFiles","prev","fetchAppData","combinedCode","values","join","currentUser","User","Layout","deployButton","Box","sx","gap","Button","variant","Typography","mt","mb","fontWeight","e","val","xs","md","height","flex","defaultLanguage","handleFilesChange","filePath","newCode","options","minimap","enabled","alignItems","p","TextField","target","onKeyDown","key","Bookmark","open","minWidth","px","OpenInNew","initialContent","html","css","js","generateIframeContent","mountTarget","PromptSection","setPrompt","handleCopyPrompt","navigator","clipboard","writeText","then","catch","setSystemPrompt","LoginModal","onClose","onLoginSuccess","Dialog","DialogTitle","DialogContent","DialogContentText","autoFocus","label","DialogActions","appname","setTimeout","handleDeploy","newBookmark","url","bookmarks","JSON","parse","localStorage","getItem","some","b","updated","setItem","stringify","SnackbarAlert","severity"],"sourceRoot":""}