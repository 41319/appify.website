{"version":3,"file":"component---src-pages-start-js-ace1f0b11e3e0dc96580.js","mappings":"kPAWA,MAAMA,EAAQC,EAAAA,YAAiB,SAAeC,EAAOC,GACnD,OAAO,QAAC,KAAQ,QAACC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAaH,GAChE,IA4FA,UA1FkB,KAChB,MAAM,EAACI,EAAK,EAACC,IAAWC,EAAAA,EAAAA,UAAS,IAC3BC,EAAW,eACX,EAACC,EAAM,EAACC,IAAYH,EAAAA,EAAAA,UAAS,IAC7B,EAACI,EAAa,EAACC,IAAmBL,EAAAA,EAAAA,WAAS,IAC3C,EAACM,EAAgB,EAACC,IAAsBP,EAAAA,EAAAA,UAAS,KACjD,EAACQ,EAAiB,EAACC,IAAuBT,EAAAA,EAAAA,UAAS,SAGzDU,EAAAA,EAAAA,YAAU,KACR,GAAIR,EAAQD,GAAiB,CAC3B,MAAMU,EAAUC,YAAW,KACzBb,GAASc,GAAaA,EAAWZ,EAASC,KAC1CC,GAAUW,GAAcA,EAAY,GAAE,GACrC,KAEH,MAAO,IAAMC,aAAaJ,EAC5B,IACC,CAACT,EAAOD,IAGX,MAAMe,EAAsB,CAACC,EAAOC,KACnB,cAAXA,GAGJb,GAAgB,EAAM,EAWxB,OACE,QAAC,IAAM,MACL,QAAC,IAAG,CACFc,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,UAAW,OACXC,UAAW,YAIb,QAAC,IAAU,CACT5B,QAAQ,KACR6B,UAAU,KACVC,cAAY,EACZR,GAAI,CACFS,SAAU,SACVC,YAAa,sBACbC,WAAY,SACZC,OAAQ,SACRC,cAAe,WAGhBlC,IAIH,QAAC,IAAM,CACLD,QAAQ,YACRoC,MAAM,UACNC,KAAK,QACLC,QAxCY,KAElB,MAAMC,EAAeC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,KAE7DC,EAAAA,EAAAA,UAAS,QAAQL,EAAe,GAqC3B,WAMH,QAAC,IAAQ,CACPM,KAAMtC,EACNuC,iBAAkB,IAClBC,QAAS5B,EACT6B,aAAc,CAAEC,SAAU,SAAUC,WAAY,YAEhD,QAACvD,EAAK,CAACoD,QAAS5B,EAAqBgC,SAAUxC,GAC5CF,IAGE,C","sources":["webpack://gatsby-starter-default/./src/pages/start.js"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { navigate } from 'gatsby'; // Import navigate from Gatsby\nimport Layout from '../components/Layout';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\n\n// Alert component for Snackbar\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst IndexPage = () => {\n  const [text, setText] = useState('');\n  const fullText = 'App with AI';\n  const [index, setIndex] = useState(0);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('info'); // 'error', 'warning', 'info', 'success'\n\n  // Typing animation effect\n  useEffect(() => {\n    if (index < fullText.length) {\n      const timeout = setTimeout(() => {\n        setText((prevText) => prevText + fullText[index]);\n        setIndex((prevIndex) => prevIndex + 1);\n      }, 100); // Adjust typing speed here (100ms per character)\n\n      return () => clearTimeout(timeout);\n    }\n  }, [index, fullText]);\n\n  // Handle Snackbar close\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenSnackbar(false);\n  };\n\n  // Handle Start button click\n  const handleStart = () => {\n    // Generate a random string for the URL\n    const randomString = Math.random().toString(36).substring(2, 15);\n    // Navigate to the new route\n    navigate(`/app/${randomString}`);\n  };\n\n  return (\n    <Layout>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          minHeight: '80vh',\n          textAlign: 'center',\n        }}\n      >\n        {/* Heading with Typing Animation */}\n        <Typography\n          variant=\"h3\"\n          component=\"h1\"\n          gutterBottom\n          sx={{\n            overflow: 'hidden', // Hide overflow\n            borderRight: '0.15em solid orange', // Cursor effect\n            whiteSpace: 'nowrap', // Keep text in one line\n            margin: '0 auto', // Center the text\n            letterSpacing: '0.15em', // Spacing between letters\n          }}\n        >\n          {text}\n        </Typography>\n\n        {/* Start Button */}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          onClick={handleStart} // Handle button click\n        >\n          Start\n        </Button>\n      </Box>\n\n      {/* Snackbar for showing messages */}\n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert onClose={handleCloseSnackbar} severity={snackbarSeverity}>\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n    </Layout>\n  );\n};\n\nexport default IndexPage;"],"names":["Alert","React","props","ref","elevation","variant","text","setText","useState","fullText","index","setIndex","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","useEffect","timeout","setTimeout","prevText","prevIndex","clearTimeout","handleCloseSnackbar","event","reason","sx","display","flexDirection","alignItems","justifyContent","minHeight","textAlign","component","gutterBottom","overflow","borderRight","whiteSpace","margin","letterSpacing","color","size","onClick","randomString","Math","random","toString","substring","navigate","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity"],"sourceRoot":""}